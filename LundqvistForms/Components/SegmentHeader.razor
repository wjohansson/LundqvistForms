@using FormsLibrary.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ISnackbar Snackbar;
@inject ProtectedLocalStorage BrowserStorage;

<MudPaper @onfocusin="@(() => borderColor = Colors.Grey.Lighten5)"
          @onfocusout="@(() => borderColor = Colors.Grey.Darken2)"
          Class="text-white pa-2 d-flex justify-space-between"
          Style="@($"background-color: {Colors.Grey.Darken2}; border-left: 4px solid {borderColor};")">
    <MudContainer>
        <EditForm Model="@Segment">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent Class="pa-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                    <MudTextField Placeholder="Avstnitt rubrik..."
                                  @bind-Value="Segment.SegmentTitle"
                                  For="@(() => Segment.SegmentTitle)"
                                  Style="@($"color: {Colors.Grey.Lighten5};font-size: 24px;")"
                                  Clearable="true" />
                    <MudTextField Placeholder="Avsnitt beskrivning..."
                                  @bind-Value="Segment.SegmentDescription"
                                  For="@(() => Segment.SegmentDescription)"
                                  Style="@($"color: {Colors.Grey.Lighten5}")"
                                  Class="mx-2"
                                  Clearable="true" />
                </MudCardContent>
            </MudCard>
        </EditForm>
    </MudContainer>

    <MudContainer Class="d-flex align-center gap-2 ma-0" Style="width: fit-content">
        <MudTooltip Text="@(expandSegment ? "Utvidga" : "Minska")"
                    Arrow="true"
                    Color="Color.Primary"
                    Placement="Placement.Bottom">
            <MudIconButton Color="Color.Primary"
                           OnClick="@(() => ToggleExpandSegment(Segment))"
                           Icon="@(expandSegment
                                    ? @Icons.Material.Filled.UnfoldMore
                                    : @Icons.Material.Filled.UnfoldLess)"
                           Size="Size.Large"></MudIconButton>
        </MudTooltip>

        <MudTooltip Text="Duplicera avsnitt" Arrow="true" Color="Color.Primary" Placement="Placement.Bottom">
            <MudIconButton Color="Color.Primary"
                           OnClick="@(() => OnSegmentDuplicate.InvokeAsync())"
                           Icon="@Icons.Material.Filled.ContentCopy"
                           Size="Size.Large"></MudIconButton>
        </MudTooltip>

        <MudTooltip Text="Ta bort avsnitt" Arrow="true" Color="Color.Primary" Placement="Placement.Bottom">
            <MudIconButton Color="Color.Error"
                           OnClick="@(() => DeleteSegment(Segment))"
                           Icon="@Icons.Material.Filled.Delete"
                           Size="Size.Large"></MudIconButton>
        </MudTooltip>
    </MudContainer>
</MudPaper>

<MudMessageBox @ref="deleteSegmentBox" Title="Ta bort avsnitt" CancelText="Avbryt">
    <MessageContent>
        Är du säker att du vill ta bort avsnittet?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Ta bort</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public EventCallback<SegmentModel> OnChange { get; set; }

    [Parameter]
    public EventCallback<SegmentModel> OnToggleExpand { get; set; }

    [Parameter]
    public EventCallback<SegmentModel> OnSegmentDelete { get; set; }

    [Parameter]
    public EventCallback<SegmentModel> OnSegmentDuplicate { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public SegmentModel Segment { get; set; } = new();

    [Parameter]
    public FormModel Form { get; set; } = new();

    [Parameter]
    public string FormType { get; set; }

    private MudMessageBox? deleteSegmentBox { get; set; }

    private bool expandSegment;
    private string borderColor = Colors.Grey.Darken2;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            return;
        }
        else if (FormType == "LundqvistForms.Pages.Index")
        {
            await BrowserStorage.SetAsync("form", Form);
        }
        else if (FormType == "LundqvistForms.Pages.EditCurrentForm")
        {
            await BrowserStorage.SetAsync("editForm", Form);
        }
    }

    private async Task DeleteSegment(SegmentModel segment)
    {
        bool? result = await deleteSegmentBox.Show();

        if (result == null || result == false)
        {
            return;
        }
        await OnSegmentDelete.InvokeAsync();
    }

    private async Task ToggleExpandSegment(SegmentModel segment)
    {
        expandSegment = !expandSegment;
        await OnToggleExpand.InvokeAsync();
    }
}