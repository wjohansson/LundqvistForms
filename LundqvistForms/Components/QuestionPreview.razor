@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using FormsLibrary.Models;
@inject ProtectedLocalStorage BrowserStorage

<MudContainer Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded" Style="@($"background-color: {Colors.Grey.Darken2};")">

    <MudText Typo="Typo.h6" GutterBottom="true" Style="text-decoration: underline;">@Question.QuestionTitle</MudText>
    <EditForm Model="Question">
        @switch (Question.QuestionOption)
        {
            case QuestionOptions.Kort:
                <MudTextField Label="Ditt svar"
                      Value="Answers.First(x => x.QuestionId == Question.QuestionId).ShortAnswer"
                      ValueChanged="@(async (string? newAnswer) =>
                                        {
                                            Answers.First(x => x.QuestionId == Question.QuestionId).ShortAnswer = newAnswer;
                                            await BrowserStorage.SetAsync("answers", Answers);
                                        })"
                      Class="px-2"
                      Style="@($"color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled"
                      Clearable="true" />

                break;
            case QuestionOptions.Lång:
                answer.LongAnswer = Answers.First(x => x.QuestionId == Question.QuestionId).LongAnswer;

                <MudTextField Label="Ditt svar"
                      Value="Answers.First(x => x.QuestionId == Question.QuestionId).LongAnswer"
                      ValueChanged="@(async (string? newAnswer) =>
                                        {
                                            Answers.First(x => x.QuestionId == Question.QuestionId).LongAnswer = newAnswer;
                                            await BrowserStorage.SetAsync("answers", Answers);
                                        })"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled"
                      Clearable="true"
                      Lines="3" />

                break;
            case QuestionOptions.Flerval:
                @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                {
                    <MultipleChoiceAnswer Answers="Answers" Answer="answer" Question="Question" Index="i" Disabled="false"></MultipleChoiceAnswer>
                }

                break;
            case QuestionOptions.Enkelval:
                <MudRadioGroup SelectedOption="Answers.First(x => x.QuestionId == Question.QuestionId).SingleChoice"
                       SelectedOptionChanged="@(async (string? newAnswer) =>
                                                {
                                                    Answers.First(x => x.QuestionId == Question.QuestionId).SingleChoice = newAnswer;
                                                    await BrowserStorage.SetAsync("answers", Answers);
                                                })"
                       Class="px-2">
                    @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                    {
                        var index = i;
                        <MudRadio Option="@Question.ChoiceOptions.ToList()[index].ChoiceTitle">
                            <MudText>@Question.ChoiceOptions.ToList()[index].ChoiceTitle</MudText>
                        </MudRadio>
                        <MudDivider Style="border: none" />
                    }
                </MudRadioGroup>

                break;
            case QuestionOptions.Dropdown:
                <MudSelect T="string"
                   Variant="Variant.Filled"
                   Class="px-2"
                   Label="Ditt svar"
                   Value="Answers.First(x => x.QuestionId == Question.QuestionId).DropdownChoice"
                   ValueChanged="@(async (string newAnswer) =>
                                    {
                                        Answers.First(x => x.QuestionId == Question.QuestionId).DropdownChoice = newAnswer;
                                        await BrowserStorage.SetAsync("answers", Answers);
                                    })"
                   AnchorOrigin="Origin.BottomCenter">

                    @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                    {
                        var index = i;

                        <MudSelectItem Value="Question.ChoiceOptions.ToList()[index].ChoiceTitle" />
                    }
                </MudSelect>

                break;
            case QuestionOptions.Datum:
                <MudDatePicker Label="Ditt svar"
                       Date="Answers.First(x => x.QuestionId == Question.QuestionId).Date"
                       DateChanged="@(async (DateTime? newAnswer) =>
                                        {
                                            Answers.First(x => x.QuestionId == Question.QuestionId).Date = newAnswer;
                                            await BrowserStorage.SetAsync("answers", Answers);
                                        })"
                       ShowWeekNumbers="true"
                       DisplayMonths="2"
                       PickerVariant="PickerVariant.Dialog"
                       Color="Color.Primary"
                       Class="px-2"
                       Variant="Variant.Filled"
                       Clearable="true" />
                break;
            case QuestionOptions.Tidsintervall:
                AnswerModel currentAnswer = Answers.First(x => x.QuestionId == Question.QuestionId);
                if (currentAnswer.Interval != null && currentAnswer.Interval.StartDate != null && currentAnswer.Interval.EndDate != null)
                {
                    DateRange.Start = currentAnswer.Interval.StartDate;
                    DateRange.End = currentAnswer.Interval.EndDate;
                }
                else
                {
                    DateRange = new();
                }
                <MudDateRangePicker Label="Ditt svar"
                            DateRange="DateRange"
                            DateRangeChanged="@(async (DateRange newAnswer) =>
                                {
                                    DateRange = newAnswer;
                                    AnswerModel currentAnswer = Answers.First(x => x.QuestionId == Question.QuestionId);
                                    currentAnswer.Interval = new()
                                        {
                                            StartDate = newAnswer.Start,
                                            EndDate = newAnswer.End,
                                            AnswerId = Answers.First(x => x.QuestionId == Question.QuestionId).AnswerId
                                        };
                                    await BrowserStorage.SetAsync("answers", Answers);
                                })"
                            ShowWeekNumbers="true"
                            PickerVariant="PickerVariant.Dialog"
                            Color="Color.Primary"
                            Class="px-2"
                            Variant="Variant.Filled"
                            Clearable="true" />

                break;
            case QuestionOptions.Tid:
                <MudTimePicker Label="Ditt svar"
                       Time="Answers.First(x => x.QuestionId == Question.QuestionId).Time"
                       TimeChanged="@(async (TimeSpan? newAnswer) =>
                                        {
                                            Answers.First(x => x.QuestionId == Question.QuestionId).Time = newAnswer;
                                            await BrowserStorage.SetAsync("answers", Answers);
                                        })"
                       PickerVariant="PickerVariant.Dialog"
                       Color="Color.Primary"
                       Class="px-2"
                       Variant="Variant.Filled"
                       Clearable="true" />

                break;
            case QuestionOptions.Skala:
                <MudContainer Class="text-white d-flex align-center gap-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                    <MudRadioGroup SelectedOption="Answers.First(x => x.QuestionId == Question.QuestionId).Scale"
                           SelectedOptionChanged="@(async (int? newAnswer) =>
                                                    {
                                                        Answers.First(x => x.QuestionId == Question.QuestionId).Scale = newAnswer;
                                                        await BrowserStorage.SetAsync("answers", Answers);
                                                    })"
                           Class="d-flex gap-0">
                        <MudContainer Style="width: 100%" Class="d-flex justify-space-between pa-0 ml-2">
                            @if (Question.ScaleOptions.LowLabel != "")
                            {
                                <MudText Align="Align.Start" Class="pa-0">@Question.ScaleOptions.LowLabel</MudText>
                            }
                            @if (Question.ScaleOptions.HighLabel != "")
                            {
                                <MudText Align="Align.End" Class="pa-0">@Question.ScaleOptions.HighLabel</MudText>
                            }
                        </MudContainer>
                        @for (int i = Question.ScaleOptions.Low; i <= Question.ScaleOptions.High; i++)
                        {
                            int? index = i;

                            <MudRadio Option="@index" Placement="Placement.Bottom">
                                @index
                            </MudRadio>
                        }
                    </MudRadioGroup>
                </MudContainer>
                break;
        }
    </EditForm>
</MudContainer>

@code {
    [Parameter]
    public QuestionModel Question { get; set; } = new();

    [Parameter]
    public DateRange DateRange { get; set; } = new();

    [Parameter]
    public List<AnswerModel> Answers { get; set; } = new();

    private AnswerModel answer = new();
}
