@using FormsLibrary.Models;
<MudContainer Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded" Style="@($"background-color: {Colors.Grey.Darken2};")">

    <MudText Typo="Typo.h6" GutterBottom="true" Style="text-decoration: underline;">@Question.QuestionTitle</MudText>
    <EditForm Model="Question">
        @switch (Question.QuestionOption)
        {
            case QuestionOptions.Kort:
                <MudTextField Label="Kort svar"
                      @bind-Value="answer.ShortAnswer"
                      Class="px-2"
                      Style="@($"color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled"
                      Clearable="true" />

                break;
            case QuestionOptions.Lång:
                <MudTextField Label="Långt svar"
                      @bind-Value="answer.LongAnswer"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled"
                      Clearable="true"
                      Lines="3" />

                break;
            case QuestionOptions.Flerval:
                //FIXA EN NY COMPONENT HÄR FÖR VARJE VAL SOM FINNS. KANSKE ÄVEN PÅ VARJE ANNAN CASE
                @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                {
                    <MultipleChoiceAnswer Answer="answer" Question="Question" Index="i"></MultipleChoiceAnswer>
                }

                break;
            case QuestionOptions.Enkelval:
                <MudRadioGroup @bind-SelectedOption="answer.SingleCoice" Class="px-2">
                    @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                    {
                        var index = i;
                        <MudRadio Option="@Question.ChoiceOptions.ToList()[index].ChoiceTitle">
                            <MudText>@Question.ChoiceOptions.ToList()[index].ChoiceTitle</MudText>
                        </MudRadio>
                        <MudDivider Style="border: none" />
                    }
                </MudRadioGroup>

                break;
            case QuestionOptions.Dropdown:
                <MudSelect T="string"
                   Variant="Variant.Filled"
                   Class="px-2"
                   Label="Svar" @bind-Value="answer.DropdownChoice"
                   AnchorOrigin="Origin.BottomCenter">

                    @for (var i = 0; i < Question.ChoiceOptions.Count; i++)
                    {
                        var index = i;

                        <MudSelectItem Value="Question.ChoiceOptions.ToList()[index].ChoiceTitle" />

                    }
                </MudSelect>

                break;
            case QuestionOptions.Datum:
                <MudDatePicker Editable="true"
                       Label="Datum"
                       @bind-Date="answer.Date"
                       ShowWeekNumbers="true"
                       DisplayMonths="2"
                       PickerVariant="PickerVariant.Dialog"
                       Color="Color.Warning"
                       Class="px-2"
                       Variant="Variant.Filled"
                       Clearable="true" />
                break;
            case QuestionOptions.Tidsintervall:
                <MudDateRangePicker Editable="true"
                            Label="Tidsintervall"
                            @bind-DateRange="DateRange"
                            ShowWeekNumbers="true"
                            PickerVariant="PickerVariant.Dialog"
                            Color="Color.Warning"
                            Class="px-2"
                            Variant="Variant.Filled"
                            Clearable="true" />

                break;
            case QuestionOptions.Tid:
                <MudTimePicker Label="Tid"
                       @bind-Time="answer.Time"
                       Editable="true"
                       PickerVariant="PickerVariant.Dialog"
                       Color="Color.Warning"
                       Class="px-2"
                       Variant="Variant.Filled"
                       Clearable="true" />
                break;
            case QuestionOptions.Skala:
                <MudContainer Class="text-white d-flex align-center gap-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                    <MudRadioGroup @bind-SelectedOption="@answer.Scale" Class="d-flex gap-0 align-end">
                        <MudContainer Style="width: 100%" Class="d-flex justify-space-between pa-0 ml-2">
                            @if (Question.ScaleOptions.LowLabel != "")
                            {
                                <MudText Align="Align.Start" Class="pa-0">@Question.ScaleOptions.LowLabel</MudText>
                            }
                            @if (Question.ScaleOptions.HighLabel != "")
                            {
                                <MudText Align="Align.End" Class="pa-0">@Question.ScaleOptions.HighLabel</MudText>
                            }
                        </MudContainer>
                        @for (int i = Question.ScaleOptions.Low; i <= Question.ScaleOptions.High; i++)
                        {
                            var index = i;

                            <MudRadio Option="@index" Placement="Placement.Bottom">
                                @index
                            </MudRadio>
                        }
                    </MudRadioGroup>
                </MudContainer>
                break;
        }
    </EditForm>
</MudContainer>

@code {
    //FORTSÄTT KLURA PÅ HUR MAN KAN SPARA SVAR PÅ ALLA FRÅGOR.
    //Vid skicka formulär så lägger man till en ny answermodel i answers, oh kopplar den answermodel.answer till privata fälten. Undersök vidare
    [Parameter]
    public QuestionModel Question { get; set; } = new();

    [Parameter]
    public DateRange DateRange { get; set; } = new();

    [Parameter]
    public List<AnswerModel> Answers { get; set; } = new();

    private AnswerModel answer = new();

    protected override async Task OnInitializedAsync()
    {
        answer = Answers.First(x => x.QuestionId == Question.QuestionId);
    }

}
