@using FormsLibrary.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ISnackbar Snackbar
@inject ProtectedLocalStorage BrowserStorage;

@foreach (QuestionModel question in Segment.Questions)
{
    <MudContainer Class="d-flex gap-2 ma-0 align-center">
        <MudContainer Class="d-flex flex-column gap-2 ma-0 pa-0" Style="width: 48px">
            <MudTooltip Text="Flytta upp fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                           Color="Color.Warning"
                           OnClick="@(() => OrderUp(question))"
                           Icon="@Icons.Material.Filled.ArrowUpward"
                           Size="Size.Medium"
                           Disabled="question.QuestionOrder == 1" />
            </MudTooltip>

            <MudTooltip Text="Flytta ner fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                           Color="Color.Warning"
                           OnClick="@(() => OrderDown(question))"
                           Icon="@Icons.Material.Filled.ArrowDownward"
                           Size="Size.Medium"
                           Disabled="question.QuestionOrder == Segment.Questions.Count()" />
            </MudTooltip>
        </MudContainer>

        <MudPaper Width="90%"
              @onfocusin="@(() => currentQuestion = question)"
              @onfocusout="@(() => currentQuestion = new QuestionModel())"
              Class="align-self-center pa-2"
              Elevation="0"
              Style="@($"background-color: {Colors.Grey.Darken2}; border-left: 4px solid {CheckFocus(question)}")">
            <EditForm Model="question" Context="editForm">
                <DataAnnotationsValidator />
                <MudCard Elevation="0">
                    <MudCardContent Class="d-flex gap-2 pa-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                        <MudTextField Label="Fråga"
                                  @bind-Value="question.QuestionTitle"
                                  For="@(() => question.QuestionTitle)"
                                  Style="@($"color: {Colors.Grey.Lighten4}")"
                                  Clearable="true"
                                  Variant="Variant.Filled" />

                        <MudContainer Style="width:30%">
                            <MudSelect Placeholder="Typ av fråga..."
                                   @bind-Value="question.QuestionOption"
                                   For="@(() => question.QuestionOption)"
                                   Style="@($"color: {Colors.Grey.Lighten5}; ")"
                                   Variant="Variant.Outlined">
                                @foreach (QuestionOptions option in Enum.GetValues(typeof(QuestionOptions)))
                                {
                                    <MudSelectItem Value="@option">@option</MudSelectItem>
                                }
                            </MudSelect>
                        </MudContainer>

                        <MudTooltip Text="Duplicera fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                            <MudIconButton Class="mt-3"
                                       Color="Color.Warning"
                                       OnClick="@(() => DuplicateQuestion(question))"
                                       Icon="@Icons.Material.Filled.ContentCopy"
                                       Size="Size.Medium"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Ta bort fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                            <MudIconButton Class="mt-3"
                                       Color="Color.Error"
                                       OnClick="@(() => DeleteQuestion(question))"
                                       Icon="@Icons.Material.Filled.Delete"
                                       Size="Size.Medium"></MudIconButton>
                        </MudTooltip>

                    </MudCardContent>

                    <QuestionContent FormType="@FormType" Form="Form" OnChange="OnChange.InvokeAsync" Expanded="Expanded" Question="question" />
                </MudCard>
            </EditForm>
        </MudPaper>
    </MudContainer>
}

<MudMessageBox @ref="deleteQuestionBox" Title="Ta bort fråga" CancelText="Avbryt">
    <MessageContent>
        Är du säker att du vill ta bort frågan?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Ta bort</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public EventCallback<SegmentModel> OnChange { get; set; }

    [Parameter]
    public SegmentModel Segment { get; set; } = new();

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public string FormType { get; set; }

    [Parameter]
    public FormModel Form { get; set; }

    private MudMessageBox? deleteQuestionBox { get; set; }
    private string deleteQuestionMessage = "Frågan borttagen";
    private QuestionModel currentQuestion = new();

    protected override async Task OnAfterRenderAsync (bool firstRender)
    {
        if (firstRender)
        {
            return;
        }
        else if (FormType == "LundqvistForms.Pages.Index")
        {
            await BrowserStorage.SetAsync("form", Form);
        }
        else if (FormType == "LundqvistForms.Pages.EditCurrentForm")
        {
            await BrowserStorage.SetAsync("editForm", Form);
        }
    }

    public string CheckFocus (QuestionModel question)
    {
        if (currentQuestion == question)
        {
            return Colors.Grey.Lighten5;
        }

        return Colors.Grey.Darken2;
    }

    private async Task DuplicateQuestion (QuestionModel question)
    {
        QuestionModel newQuestion = new()
            {
                SegmentId = question.SegmentId,
                QuestionTitle = question.QuestionTitle,
                QuestionOption = question.QuestionOption,
                QuestionOrder = Segment.Questions.Count + 1
            };

        foreach (ChoiceModel choice in question.ChoiceOptions)
        {
            ChoiceModel newChoice = new()
                {
                    QuestionId = choice.QuestionId,
                    ChoiceTitle = choice.ChoiceTitle,
                    ChoiceOrder = choice.ChoiceOrder,
                    ChoiceDate = DateTime.Now
                };

            newQuestion.ChoiceOptions.Add(newChoice);
        }

        ScaleModel newScale = new()
            {
                Low = question.ScaleOptions.Low,
                High = question.ScaleOptions.High,
                LowLabel = question.ScaleOptions.LowLabel,
                HighLabel = question.ScaleOptions.HighLabel
            };

        newQuestion.ScaleOptions = newScale;

        Segment.Questions.Add(newQuestion);

        await OnChange.InvokeAsync();
    }

    private async Task DeleteQuestion (QuestionModel question)
    {
        bool? result = await deleteQuestionBox.Show();

        if (result == null || result == false)
        {
            return;
        }

        List<QuestionModel> questionsAfterCurrent = Segment.Questions.Where(x => x.QuestionOrder > question.QuestionOrder).ToList();

        foreach (QuestionModel afterQuestion in questionsAfterCurrent)
        {
            afterQuestion.QuestionOrder--;
        }

        Segment.Questions.Remove(question);
        Snackbar.Add(deleteQuestionMessage, Severity.Info);

        await OnChange.InvokeAsync();
    }

    private async Task OrderUp (QuestionModel question)
    {
        QuestionModel questionBefore = Segment.Questions.First(x => x.QuestionOrder == question.QuestionOrder - 1);
        questionBefore.QuestionOrder++;
        question.QuestionOrder--;
        Segment.Questions = Segment.Questions.OrderBy(x => x.QuestionOrder).ToList();
        await OnChange.InvokeAsync();
    }

    private async Task OrderDown (QuestionModel question)
    {
        QuestionModel questionAfter = Segment.Questions.First(x => x.QuestionOrder == question.QuestionOrder + 1);
        questionAfter.QuestionOrder--;
        question.QuestionOrder++;
        Segment.Questions = Segment.Questions.OrderBy(x => x.QuestionOrder).ToList();
        await OnChange.InvokeAsync();
    }
}
