@using FormsLibrary.Models;
@foreach (QuestionModel question in Segment.Questions)
{
    <MudPaper Width="90%" @onfocusin="@(() => currentQuestion = question)" @onfocusout="@(() => currentQuestion = new QuestionModel())" Class="align-self-center pa-2" Elevation="0" Style="@($"background-color: {Colors.Grey.Darken2}; border-left: 4px solid {CheckFocus(question)}")">
        <EditForm Model="question">
            <DataAnnotationsValidator />
            <MudCard Elevation="0">
                <MudCardContent Class="d-flex gap-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                    <MudTextField Label="Fråga"
                              @bind-Value="question.QuestionTitle"
                              For="@(() => question.QuestionTitle)"
                              Style="@($"color: {Colors.Grey.Lighten4}")"
                              Clearable="true"
                              Variant="Variant.Filled" />

                    <MudSelect Placeholder="Typ av fråga..."
                           @bind-Value="question.QuestionOption"
                           For="@(() => question.QuestionOption)"
                           Style="@($"color: {Colors.Grey.Lighten5}; ")"
                           Variant="Variant.Outlined">
                        @foreach (QuestionOptions option in Enum.GetValues(typeof(QuestionOptions)))
                        {
                            <MudSelectItem Value="@option">@option</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTooltip Text="Duplicera fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                        <MudIconButton Class="mt-3"
                                   Color="Color.Warning"
                                   OnClick="@(() => DuplicateQuestion(question))"
                                   Icon="@Icons.Material.Filled.ContentCopy"
                                   Size="Size.Medium"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Ta bort fråga" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                        <MudIconButton Class="mt-3"
                                   Color="Color.Error"
                                   OnClick="@(() => DeleteQuestion(question))"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Size="Size.Medium"></MudIconButton>
                    </MudTooltip>

                </MudCardContent>

                <QuestionContent Expanded="Expanded" Question="@question" />
            </MudCard>
        </EditForm>
    </MudPaper>
}

@code {
    [Parameter]
    public EventCallback<SegmentModel> OnChange { get; set; }

    [Parameter]
    public SegmentModel Segment { get; set; } = new();

    [Parameter]
    public bool Expanded { get; set; }

    private QuestionModel currentQuestion = new();

    public string CheckFocus(QuestionModel question)
    {
        if (currentQuestion == question)
        {
            return Colors.Grey.Lighten5;
        }

        return Colors.Grey.Darken2;
    }

    private async Task DuplicateQuestion(QuestionModel question)
    {
        QuestionModel newQuestion = new()
            {
                SegmentId = question.SegmentId,
                QuestionTitle = question.QuestionTitle,
                QuestionOption = question.QuestionOption,
            };

        foreach (ChoiceModel choice in question.ChoiceOptions)
        {
            ChoiceModel newChoice = new()
                {
                    QuestionId = choice.QuestionId,
                    ChoiceTitle = choice.ChoiceTitle
                };

            newQuestion.ChoiceOptions.Add(newChoice);
        }

        ScaleModel newScale = new()
            {
                QuestionId = question.QuestionId,
                Low = question.ScaleOptions.Low,
                High = question.ScaleOptions.High,
                LowLabel = question.ScaleOptions.LowLabel,
                HighLabel = question.ScaleOptions.HighLabel
            };

        newQuestion.ScaleOptions = newScale;

        Segment.Questions.Add(newQuestion);

        await OnChange.InvokeAsync();
    }

    private async Task DeleteQuestion(QuestionModel question)
    {
        Segment.Questions.Remove(question);

        await OnChange.InvokeAsync();
    }
}
