@using FormsLibrary.Models;
@using LundqvistForms.Services;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject ISnackbar Snackbar
@inject AnswerServiceUi answerService;
@inject NavigationManager navigationManager;
@inject ProtectedLocalStorage BrowserStorage

<MudText Typo="Typo.h2">@Form.FormTitle</MudText>
<MudText Typo="Typo.h6">@Form.FormDescription</MudText>

<Virtualize Items="Form.Segments" Context="segment">
    <MudContainer MaxWidth="MaxWidth.Medium"
                  Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded"
                  Style="@($"background-color: {Colors.Grey.Darken3};")">
        <MudText Align="Align.Center" Typo="Typo.h4">@segment.SegmentTitle</MudText>
        <MudText Align="Align.Center" Typo="Typo.h6">@segment.SegmentDescription</MudText>

        <Virtualize Items="segment.Questions" Context="question">
            <QuestionPreview DateRange="dateRange" Question="question" Answers="Answers"></QuestionPreview>
        </Virtualize>
    </MudContainer>
</Virtualize>

<MudContainer Class="d-flex justify-center gap-2">
    <MudTooltip Arrow="true" Placement="Placement.Right">
        <MudButton ButtonType="ButtonType.Submit"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="SendAnswers"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   Size="Size.Large">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">SKICKAR SVAR...</MudText>
            }
            else
            {
                <MudText>SKICKA SVAR</MudText>
            }
        </MudButton>
    </MudTooltip>

    <MudTooltip Arrow="true" Placement="Placement.Right">
        <MudButton ButtonType="ButtonType.Reset"
                   Variant="Variant.Outlined"
                   Color="Color.Primary"
                   OnClick="ClearAnswers"
                   StartIcon="@Icons.Material.Filled.Delete"
                   Size="Size.Large">
            RENSA SVAR
        </MudButton>
    </MudTooltip>
</MudContainer>

<MudMessageBox @ref="clearBox" Title="Rensa svar" CancelText="Avbryt">
    <MessageContent>
        Är du säker att du vill rensa svaren?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Rensa</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    [Parameter]
    public EventCallback<AnswerModel> OnChange { get; set; }

    [Parameter]
    public EventCallback<AnswerModel> OnClear { get; set; }

    [Parameter]
    public FormModel Form { get; set; } = new();

    [Parameter]
    public List<AnswerModel> Answers { get; set; } = new();

    private MudMessageBox? clearBox { get; set; }
    private bool processing;
    private DateRange dateRange = new();

    private string successMessage = "Svar skickat";
    private string clearMessage = "Svar rensat";
    private string intervalErrorMessage = "Fel tidsintervall format";

    public async Task SendAnswers()
    {
        try
        {
            processing = true;

            foreach (AnswerModel answer in Answers)
            {
                await answerService.CreateAnswer(answer);
            }

            await Task.Delay(500);
            processing = false;
            Snackbar.Add(successMessage, Severity.Success);
            await BrowserStorage.DeleteAsync("answerForm");
            await BrowserStorage.DeleteAsync("answers");
            navigationManager.NavigateTo("/forms");
        }
        catch (Exception)
        {
            processing = false;
            Snackbar.Add("Svar kunde inte skickas", Severity.Error);

            return;
        }
    }

    private async void ClearAnswers()
    {
        bool? result = await clearBox.Show();

        if (result == null || result == false)
        {
            return;
        }

        Answers = new();

        Guid answerGroupId = Guid.NewGuid();
        foreach (SegmentModel segment in Form.Segments.ToList())
        {
            foreach (QuestionModel question in segment.Questions.ToList())
            {
                AnswerModel newAnswer = new()
                    {
                        AnswerGroupId = answerGroupId,
                        QuestionId = question.QuestionId,
                        FormId = Form.FormId,
                        AnswerDate = DateTime.Now
                    };

                Answers.Add(newAnswer);
            }
        }

        Snackbar.Add(clearMessage, Severity.Info);
        await BrowserStorage.SetAsync("answerForm", Form);
        await BrowserStorage.SetAsync("answers", Answers);

        StateHasChanged();
    }
}
