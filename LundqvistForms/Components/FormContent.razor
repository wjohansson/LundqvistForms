@using FormsLibrary.Models;

<FormHeader FormType="@FormType" Form="Form" />

<Virtualize Items="Form.Segments" Context="segment">
    <MudContainer Class="d-flex gap-2 mx-0 justify-center">
        <MudContainer Class="d-flex flex-column gap-2 ma-0 mt-3 pa-0" Style="width: 48px">
            <MudTooltip Text="Flytta upp avsnitt" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                               Color="Color.Warning"
                               OnClick="@(() => OrderUp(segment))"
                               Icon="@Icons.Material.Filled.ArrowUpward"
                               Size="Size.Medium"
                               Disabled="segment.SegmentOrder == 1" />
            </MudTooltip>

            <MudTooltip Text="Flytta ner avsnitt" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                               Color="Color.Warning"
                               OnClick="@(() => OrderDown(segment))"
                               Icon="@Icons.Material.Filled.ArrowDownward"
                               Size="Size.Medium"
                               Disabled="segment.SegmentOrder == Form.Segments.Count()" />
            </MudTooltip>
        </MudContainer>

        <MudContainer MaxWidth="MaxWidth.Medium"
                      @onclick="@(() => FocusSegment(segment))"
                      Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded"
                      Style="@($"background-color: {Colors.Grey.Darken3}; border-left: 4px solid {CheckFocus(segment)};")">
            <SegmentHeader OnToggleExpand="@(() => ToggleSegmentExpand(segment))"
                           OnChange="Update"
                           Form="Form"
                           IsFocused="@(currentSegment == segment)" 
                           Segment="segment" 
                           FormType="@FormType" />

            <Questions FormType="@FormType" Form="Form" OnChange="Update" Segment="segment" Expanded="segmentExpanded" />
        </MudContainer>

        @if (segment == currentSegment)
        {
            <Controls OnQuestionAdded="AddQuestion" OnSegmentAdded="AddSegment" />
        }
        else
        {
            <MudContainer MaxWidth="MaxWidth.ExtraSmall"
              Class="d-flex flex-column gap-2 pa-2 ma-0 rounded" Style="width: 58px"></MudContainer>
        }
    </MudContainer>
</Virtualize>

@code {
    [Parameter]
    public EventCallback<FormModel> OnChange { get; set; }

    [Parameter]
    public FormModel Form { get; set; }

    [Parameter]
    public string FormType { get; set; }

    private bool segmentExpanded = true;
    private SegmentModel currentSegment = new();

    protected override async Task OnParametersSetAsync ()
    {
        if (Form.FormTitle != "")
        {
            currentSegment = Form.Segments.ToList()[0];
        }
    }

    public async void AddQuestion ()
    {
        QuestionModel newQuestion = new()
            {
                SegmentId = currentSegment.SegmentId,
                QuestionTitle = $"Fråga {currentSegment.Questions.Count + 1}",
                QuestionOrder = currentSegment.Questions.Count + 1,
                QuestionDate = DateTime.Now
            };

        ChoiceModel newChoice = new()
            {
                QuestionId = newQuestion.QuestionId,
                ChoiceTitle = "Alternativ 1",
                ChoiceOrder = newQuestion.ChoiceOptions.Count + 1,
                ChoiceDate = DateTime.Now
            };
        newQuestion.ChoiceOptions.Add(newChoice);

        currentSegment.Questions.Add(newQuestion);
        Update();
    }

    public async void AddSegment ()
    {
        SegmentModel newSegment = new()
            {
                FormId = Form.FormId,
                SegmentTitle = "Avsnitt utan namn",
                SegmentDescription = "Ingen beskrivning",
                SegmentOrder = Form.Segments.Count + 1,
                SegmentDate = DateTime.Now
            };
        Form.Segments.Add(newSegment);
        currentSegment = newSegment;
        Update();
    }

    public void FocusSegment (SegmentModel segment)
    {
        currentSegment = segment;
    }

    public string CheckFocus (SegmentModel segment)
    {
        if (currentSegment == segment)
        {
            return Colors.Grey.Lighten5;
        }
        return Colors.Grey.Darken3;
    }

    public void ToggleSegmentExpand (SegmentModel segment)
    {
        currentSegment = segment;
        segmentExpanded = !segmentExpanded;
    }

    private async void Update ()
    {
        StateHasChanged();
        await OnChange.InvokeAsync();
    }

    private async Task OrderUp (SegmentModel segment)
    {
        SegmentModel segmentBefore = Form.Segments.First(x => x.SegmentOrder == segment.SegmentOrder - 1);
        segmentBefore.SegmentOrder++;
        segment.SegmentOrder--;
        Form.Segments = Form.Segments.OrderBy(x => x.SegmentOrder).ToList();
        await OnChange.InvokeAsync();
    }

    private async Task OrderDown (SegmentModel segment)
    {
        SegmentModel segmentAfter = Form.Segments.First(x => x.SegmentOrder == segment.SegmentOrder + 1);
        segmentAfter.SegmentOrder--;
        segment.SegmentOrder++;
        Form.Segments = Form.Segments.OrderBy(x => x.SegmentOrder).ToList();
        await OnChange.InvokeAsync();
    }
}
