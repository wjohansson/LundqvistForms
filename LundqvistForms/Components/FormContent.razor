@using FormsLibrary.Models;
@inject ISnackbar Snackbar;

<FormHeader FormType="@FormType" Form="Form" />

<Virtualize Items="Form.Segments" Context="segment">
    <MudContainer Class="d-flex gap-2 mx-0 justify-center">
        <MudContainer Class="d-flex flex-column gap-2 ma-0 mt-3 pa-0" Style="width: 48px">
            <MudTooltip Text="Flytta upp avsnitt" Arrow="true" Color="Color.Primary" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                               Color="Color.Primary"
                               OnClick="@(() => OrderUp(segment))"
                               Icon="@Icons.Material.Filled.ArrowUpward"
                               Size="Size.Medium"
                               Disabled="segment.SegmentOrder == 1" />
            </MudTooltip>

            <MudTooltip Text="Flytta ner avsnitt" Arrow="true" Color="Color.Primary" Placement="Placement.Bottom">
                <MudIconButton Class="mt-3"
                               Color="Color.Primary"
                               OnClick="@(() => OrderDown(segment))"
                               Icon="@Icons.Material.Filled.ArrowDownward"
                               Size="Size.Medium"
                               Disabled="segment.SegmentOrder == Form.Segments.Count()" />
            </MudTooltip>
        </MudContainer>

        <MudContainer MaxWidth="MaxWidth.Medium"
                      @onclick="@(() => FocusSegment(segment))"
                      Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded"
                      Style="@($"background-color: {Colors.Grey.Darken3}; border-left: 4px solid {CheckFocus(segment)};")">
            <SegmentHeader OnToggleExpand="@(() => ToggleSegmentExpand(segment))"
                           OnChange="Update"
                           Form="Form"
                           IsFocused="@(CurrentSegment == segment)"
                           Segment="segment"
                           FormType="@FormType"
                           OnSegmentDelete="@(() => DeleteSegment(segment))"
                           OnSegmentDuplicate="@(() => DuplicateSegment(segment))" />

            <Questions FormType="@FormType" Form="Form" OnChange="Update" Segment="segment" Expanded="SegmentExpanded[segment.SegmentId]" />
        </MudContainer>

        @if (segment == CurrentSegment)
        {
            <Controls OnQuestionAdded="AddQuestion" OnSegmentAdded="AddSegment" />
        }
        else
        {
            <MudContainer MaxWidth="MaxWidth.ExtraSmall"
                      Class="d-flex flex-column gap-2 pa-2 ma-0 rounded" Style="width: 58px"></MudContainer>
        }
    </MudContainer>
</Virtualize>

<MudContainer Class="d-flex justify-center gap-2">
    <MudTooltip Arrow="true" Placement="Placement.Right">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="@(() => OnFormCreated.InvokeAsync())"
                   StartIcon="@Icons.Material.Filled.AddCircle"
                   Size="Size.Large">
            @if (Processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">@submitButtonProcessing</MudText>
            }
            else
            {
                <MudText>@submitButtonText</MudText>
            }
        </MudButton>
    </MudTooltip>

    <MudTooltip Arrow="true" Placement="Placement.Right">
        <MudButton Variant="Variant.Outlined"
                   Color="Color.Primary"
                   OnClick="@(() => OnFormCleared.InvokeAsync())"
                   StartIcon="@Icons.Material.Filled.Delete"
                   Size="Size.Large">
            @cancelButtonText
        </MudButton>
    </MudTooltip>
</MudContainer>

@code {
    [Parameter]
    public EventCallback<FormModel> OnChange { get; set; }

    [Parameter]
    public EventCallback<FormModel> OnFormCreated { get; set; }

    [Parameter]
    public EventCallback<FormModel> OnFormCleared { get; set; }

    [Parameter]
    public FormModel Form { get; set; }

    [Parameter]
    public string FormType { get; set; }

    [Parameter]
    public bool Processing { get; set; }

    [Parameter]
    public Dictionary<Guid, bool> SegmentExpanded { get; set; } = new();

    private SegmentModel CurrentSegment = new();
    private string deleteSegmentMessage = "Avsnitt borttaget";
    private string submitButtonText = "";
    private string submitButtonProcessing = "";
    private string cancelButtonText = "";

    protected override async Task OnInitializedAsync()
    {
        if (FormType == "LundqvistForms.Pages.Index")
        {
            submitButtonText = "SKAPA FORMULÄR";
            submitButtonProcessing = "SKAPAR FORMULÄR...";
            cancelButtonText = "RENSA FORMULÄR";
        }
        else
        {
            submitButtonText = "REDIGERA FORMULÄR";
            submitButtonProcessing = "REDIGERAR FORMULÄR...";
            cancelButtonText = "AVBRYT REDIGERING";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Form.FormTitle != "" && CurrentSegment.FormId == Guid.Empty)
        {
            CurrentSegment = Form.Segments.ToList()[0];

            foreach (SegmentModel segment in Form.Segments)
            {
                SegmentExpanded[segment.SegmentId] = true;
            }
        }
    }

    public async void AddQuestion()
    {
        QuestionModel newQuestion = new()
            {
                SegmentId = CurrentSegment.SegmentId,
                QuestionTitle = $"Fråga {CurrentSegment.Questions.Count + 1}",
                QuestionOrder = CurrentSegment.Questions.Count + 1,
                QuestionDate = DateTime.Now,
                QuestionOption = QuestionOptions.Flerval
            };

        ChoiceModel newChoice = new()
            {
                QuestionId = newQuestion.QuestionId,
                ChoiceTitle = "Alternativ 1",
                ChoiceOrder = newQuestion.ChoiceOptions.Count + 1,
                ChoiceDate = DateTime.Now
            };
        newQuestion.ChoiceOptions.Add(newChoice);

        CurrentSegment.Questions.Add(newQuestion);
        Update();
    }

    public async void AddSegment()
    {
        SegmentModel newSegment = new()
            {
                FormId = Form.FormId,
                SegmentTitle = "Avsnitt utan namn",
                SegmentDescription = "Ingen beskrivning",
                SegmentOrder = Form.Segments.Count + 1,
                SegmentDate = DateTime.Now
            };
        Form.Segments.Add(newSegment);
        CurrentSegment = newSegment;
        SegmentExpanded[newSegment.SegmentId] = true;
        Update();
    }

    public void FocusSegment(SegmentModel segment)
    {
        CurrentSegment = segment;
    }

    public string CheckFocus(SegmentModel segment)
    {
        if (CurrentSegment == segment)
        {
            return Colors.Grey.Lighten5;
        }
        return Colors.Grey.Darken3;
    }

    public void ToggleSegmentExpand(SegmentModel segment)
    {
        CurrentSegment = segment;
        SegmentExpanded[segment.SegmentId] = !SegmentExpanded[segment.SegmentId];
    }

    private async void DeleteSegment(SegmentModel segment)
    {
        List<SegmentModel> segmentsAfterCurrent = Form.Segments.Where(x => x.SegmentOrder > segment.SegmentOrder).ToList();

        foreach (SegmentModel afterSegment in segmentsAfterCurrent)
        {
            afterSegment.SegmentOrder--;
        }

        Form.Segments.Remove(segment);
        SegmentExpanded.Remove(segment.SegmentId);
        if (Form.Segments.Count == 0)
        {
            SegmentModel newSegment = new SegmentModel()
                {
                    FormId = Form.FormId,
                    SegmentTitle = "Avsnitt utan namn",
                    SegmentDescription = "Ingen beskrivning",
                    SegmentOrder = Form.Segments.Count + 1,
                    SegmentDate = DateTime.Now
                };
            Form.Segments.Add(newSegment);
            SegmentExpanded[newSegment.SegmentId] = true;
            CurrentSegment = newSegment;
        }

        if (CurrentSegment == segment)
        {
            CurrentSegment = Form.Segments.ToList()[0];
        }
        Snackbar.Add(deleteSegmentMessage, Severity.Info);
        await OnChange.InvokeAsync();
    }

    private async Task DuplicateSegment(SegmentModel segment)
    {
        SegmentModel newSegment = new()
            {
                FormId = segment.FormId,
                SegmentTitle = segment.SegmentTitle,
                SegmentDescription = segment.SegmentDescription,
                SegmentOrder = Form.Segments.Count + 1
            };

        foreach (QuestionModel question in segment.Questions)
        {
            QuestionModel newQuestion = new()
                {
                    SegmentId = question.SegmentId,
                    QuestionTitle = question.QuestionTitle,
                    QuestionOption = question.QuestionOption,
                    ScaleOptions = question.ScaleOptions,
                    QuestionOrder = question.QuestionOrder
                };

            foreach (ChoiceModel choice in question.ChoiceOptions)
            {
                ChoiceModel newChoice = new()
                    {
                        QuestionId = choice.QuestionId,
                        ChoiceTitle = choice.ChoiceTitle,
                        ChoiceOrder = choice.ChoiceOrder,
                        ChoiceDate = DateTime.Now
                    };

                newQuestion.ChoiceOptions.Add(newChoice);
            }

            ScaleModel newScale = new()
                {
                    QuestionId = question.QuestionId,
                    Low = question.ScaleOptions.Low,
                    High = question.ScaleOptions.High,
                    LowLabel = question.ScaleOptions.LowLabel,
                    HighLabel = question.ScaleOptions.HighLabel
                };

            newQuestion.ScaleOptions = newScale;

            newSegment.Questions.Add(newQuestion);
        }

        Form.Segments.Add(newSegment);
        SegmentExpanded[newSegment.SegmentId] = true;

        await OnChange.InvokeAsync();
    }

    private async void Update()
    {
        StateHasChanged();
        await OnChange.InvokeAsync();
    }

    private async Task OrderUp(SegmentModel segment)
    {
        SegmentModel segmentBefore = Form.Segments.First(x => x.SegmentOrder == segment.SegmentOrder - 1);
        segmentBefore.SegmentOrder++;
        segment.SegmentOrder--;
        Form.Segments = Form.Segments.OrderBy(x => x.SegmentOrder).ToList();
        await OnChange.InvokeAsync();
    }

    private async Task OrderDown(SegmentModel segment)
    {
        SegmentModel segmentAfter = Form.Segments.First(x => x.SegmentOrder == segment.SegmentOrder + 1);
        segmentAfter.SegmentOrder--;
        segment.SegmentOrder++;
        Form.Segments = Form.Segments.OrderBy(x => x.SegmentOrder).ToList();
        await OnChange.InvokeAsync();
    }
}
