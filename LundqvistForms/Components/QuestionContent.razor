@using FormsLibrary.Models;
<EditForm Model="Question">
    <MudContainer Class="d-flex flex-column pa-2 gap-2" Style="@($"background-color: {Colors.Grey.Darken1};")">
        @switch (Question.Option)
        {
            case QuestionOptions.Kort:

                <MudTextField Placeholder="Kort svar..."
                      @bind-Value="shortAnswer"
                      Class="px-2"
                      Style="@($"color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled" />

                break;
            case QuestionOptions.Lång:
                <MudTextField placeholder="Långt svar..."
                      @bind-Value="longAnswer"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled" />

                break;
            case QuestionOptions.Flerval:
                @for (var i = 0; i < multipleChoiceAlternatives.Count; i++)
                {
                    var index = i;
                    <MudTextField Placeholder="Alternativ..."
                      @bind-Value="multipleChoiceAlternatives[index]"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled" />
                }

                <MudButton Variant="Variant.Filled" OnClick="@AddMultipleChoice" Color="Color.Warning">Add option</MudButton>

                break;
            case QuestionOptions.Enkelval:
                @for (var i = 0; i < singleChoiceAlternatives.Count; i++)
                {
                    var index = i;
                    <MudTextField Placeholder="Alternativ..."
                      @bind-Value="singleChoiceAlternatives[index]"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled" />
                }

                <MudButton Variant="Variant.Filled" OnClick="@AddSingleChoice" Color="Color.Warning">Add option</MudButton>

                break;
            case QuestionOptions.Dropdown:
                @for (var i = 0; i < dropdownChoiceAlternatives.Count; i++)
                {
                    var index = i;
                    <MudTextField Placeholder="Alternativ..."
                      @bind-Value="dropdownChoiceAlternatives[index]"
                      Class="px-2"
                      Style="@($" color: {Colors.Grey.Lighten4};")"
                      Variant="Variant.Filled" />
                }

                <MudButton Variant="Variant.Filled" OnClick="@AddDropdownChoice" Color="Color.Warning">Add option</MudButton>

                break;
            case QuestionOptions.Datum:
                <MudDatePicker Editable="true"
                       Placeholder="Datum..."
                       @bind-Value="date" 
                       Size="50%"
                       Class="px-2" 
                       Style="@($" color: {Colors.Grey.Lighten4};")"
                       ShowWeekNumbers="true" 
                       DisplayMonths="2"
                       Variant="Variant.Filled" 
                       PickerVariant="PickerVariant.Dialog"
                       Color="Color.Warning"/>
                break;
            case QuestionOptions.Tid:
                <MudDateRangePicker type="time" placeholder="Tid..." id="time-span" @bind-Value="timeSpan" class="form-control border-none lh-lg text-white" style="font-size: 16px; background-color: rgb(70, 70, 70) !important" />
                break;
            case QuestionOptions.Skala:
                <div class="text-white">
                    <div class="d-flex gap-2 align-items-center">
                        <InputSelect @bind-Value="scaleLow" class="w-25 form-control border-none lh-lg text-white" style="font-size: 16px; background-color: rgb(70, 70, 70) !important">
                            <option value="0">0</option>
                            <option value="1">1</option>
                        </InputSelect>
                        <span>till</span>
                        <InputSelect @bind-Value="scaleHigh" class="w-25 form-control border-none lh-lg text-white" style="font-size: 16px; background-color: rgb(70, 70, 70) !important">
                            @for (int i = 1; i <= 10; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="d-flex flex-column gap-2 mt-4">
                        <div class="d-flex align-items-center gap-4">
                            <label for="scale-low-label">@scaleLow</label>
                            <InputText placeholder="Etikett (valfri)..." id="scale-low-label" @bind-Value="scaleLowLabel" class="w-50 form-control border-none lh-lg text-white" style="font-size: 16px; background-color: rgb(70, 70, 70) !important" />
                        </div>
                        <div class="d-flex align-items-center gap-4">
                            <label for="scale-high-label">@scaleHigh</label>
                            <InputText placeholder="Etikett (valfri)..." id="scale-high-label" @bind-Value="scaleHighLabel" class="w-50 form-control border-none lh-lg text-white" style="font-size: 16px; background-color: rgb(70, 70, 70) !important" />
                        </div>
                    </div>
                </div>
                break;
        }
    </MudContainer>

</EditForm>

@code {
    // TODO: Fixa så att det inte går att ha dubletter i API:et
    // TODO: Fixa OI på alla input rader för att visualisera vad input ska vara
    // TODO: Fixa TimeSpan så att det hämtar in nuvarande tid som standard värde plus att den inte ska PM/AM
    // TODO: Fixa utseendemässiga sidan av att bocka för. Ta bort blå focus indikatorn. Outline och border?
    // TODO: Fixa en obligatorisk toggle på alla svar
    // TODO: Fixa sätt att duplicera fråga, avsnitt och helt form
    [Parameter]
    public QuestionModel Question { get; set; } = new();


    private string? shortAnswer;
    private string? longAnswer;
    private List<string> multipleChoiceAlternatives = new();
    private List<string> singleChoiceAlternatives = new();
    private List<string> dropdownChoiceAlternatives = new();
    private DateTime? date;
    private string? timeSpan;
    //private TimeSpan localTime = TimeSpan.FromHours(0);
    //private string timeSpan
    //{
    //    get => Answer.Answers.ToString();
    //    set => TimeSpan.TryParse(value, out LocalTime);
    //}
    private int? scaleLow = 1;
    private int? scaleHigh = 5;
    private string? scaleLowLabel;
    private string? scaleHighLabel;


    private AnswerModel Answer = new();
    private List<string> multipleChoices = new();

    private bool MultipleChoice()
    {
        return false;
    }

    private void AddMultipleChoice()
    {
        string key = $"Alternativ {multipleChoiceAlternatives.Count + 1}";
        multipleChoiceAlternatives.Add(key);
    }

    private void AddSingleChoice()
    {
        string key = $"Alternativ {singleChoiceAlternatives.Count + 1}";
        singleChoiceAlternatives.Add(key);
    }

    private void AddDropdownChoice()
    {
        string key = $"Alternativ {dropdownChoiceAlternatives.Count + 1}";
        dropdownChoiceAlternatives.Add(key);
    }
}
