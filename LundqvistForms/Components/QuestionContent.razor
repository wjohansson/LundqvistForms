@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using FormsLibrary.Models;
@inject ProtectedLocalStorage BrowserStorage;

@if (Expanded)
{
    <MudContainer Class="d-flex flex-column pa-2 gap-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
        @switch (Question.QuestionOption)
        {
            case QuestionOptions.Kort:
                <MudTextField Label="Kort svar"
                  @bind-Value="shortAnswer"
                  Class="px-2"
                  Style="@($"color: {Colors.Grey.Lighten4};")"
                  Variant="Variant.Filled"
                  Clearable="true"
                  Disabled="true" />

                break;
            case QuestionOptions.Lång:
                <MudTextField Label="Långt svar"
                  @bind-Value="longAnswer"
                  Class="px-2"
                  Style="@($" color: {Colors.Grey.Lighten4};")"
                  Variant="Variant.Filled"
                  Clearable="true"
                  Lines="4"
                  Disabled="true" />

                break;
            case QuestionOptions.Flerval:
            case QuestionOptions.Enkelval:
            case QuestionOptions.Dropdown:

                foreach (ChoiceModel choice in Question.ChoiceOptions)
                {

                    <EditForm Model="choice">
                        <DataAnnotationsValidator />
                        <MudCard Elevation="0">
                            <MudCardContent Class="d-flex align-center pa-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                                <MudContainer Class="d-flex flex-column gap-2 ma-0 pa-0" Style="width: 48px">
                                    <MudTooltip Text="Flytta upp alternativ" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                                        <MudIconButton Class="mt-3"
                                       Color="Color.Warning"
                                       OnClick="@(() => OrderUp(choice))"
                                       Icon="@Icons.Material.Filled.ArrowUpward"
                                       Size="Size.Small"
                                       Disabled="choice.ChoiceOrder == 1" />
                                    </MudTooltip>

                                    <MudTooltip Text="Flytta ner alternativ" Arrow="true" Color="Color.Warning" Placement="Placement.Bottom">
                                        <MudIconButton Class="mt-3"
                                       Color="Color.Warning"
                                       OnClick="@(() => OrderDown(choice))"
                                       Icon="@Icons.Material.Filled.ArrowDownward"
                                       Size="Size.Small"
                                       Disabled="choice.ChoiceOrder == Question.ChoiceOptions.Count()" />
                                    </MudTooltip>
                                </MudContainer>

                                <MudContainer Class="d-flex flex-column">
                                    <MudTextField Label="Alternativ"
                                  @bind-Value="choice.ChoiceTitle"
                                  Class="px-2"
                                  Style="@($" color: {Colors.Grey.Lighten4};")"
                                  Variant="Variant.Filled"
                                  Clearable="true" />

                                    @if (String.IsNullOrWhiteSpace(choice.ChoiceTitle))
                                    {
                                        <MudText Class="px-2" Color="Color.Error" Typo="Typo.caption">Alternativet kan inte vara tomt</MudText>
                                    }
                                </MudContainer>

                                <MudTooltip Text="Ta bort alternativ" Arrow="true" Color="Color.Warning" Placement="Placement.Right">
                                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   OnClick="@(() => Question.ChoiceOptions.Remove(choice))"
                                   Color="Color.Error" />
                                </MudTooltip>
                            </MudCardContent>
                        </MudCard>
                    </EditForm>
                }



                <MudTooltip Text="Lägg till alternativ" Arrow="true" Color="Color.Warning" Placement="Placement.Right">
                    <MudIconButton Size="Size.Large"
                       Icon="@Icons.Material.Filled.AddCircle"
                       OnClick="@AddChoice"
                       Color="Color.Warning" />
                </MudTooltip>

                break;
            case QuestionOptions.Datum:
                <MudDatePicker Editable="true"
                   Label="Datum"
                   @bind-Value="date"
                   ShowWeekNumbers="true"
                   DisplayMonths="2"
                   PickerVariant="PickerVariant.Dialog"
                   Color="Color.Warning"
                   Class="px-2"
                   Variant="Variant.Filled"
                   Clearable="true"
                   Disabled="true" />
                break;
            case QuestionOptions.Tidsintervall:
                <MudDateRangePicker Editable="true"
                        Label="Tidsintervall"
                        @bind-DateRange="dateRange"
                        ShowWeekNumbers="true"
                        PickerVariant="PickerVariant.Dialog"
                        Color="Color.Warning"
                        Class="px-2"
                        Variant="Variant.Filled"
                        Clearable="true"
                        Disabled="true" />
                break;
            case QuestionOptions.Tid:
                <MudTimePicker Label="Tid"
                   @bind-Time="timeSpan"
                   Editable="true"
                   PickerVariant="PickerVariant.Dialog"
                   Color="Color.Warning"
                   Class="px-2"
                   Variant="Variant.Filled"
                   Clearable="true"
                   Disabled="true" />
                break;
            case QuestionOptions.Skala:
                <MudContainer Class="text-white">
                    <MudContainer Class="d-flex align-center gap-2" Style="@($"background-color: {Colors.Grey.Darken2};")">
                        <MudSelect @bind-Value="@(Question.ScaleOptions.Low)" Variant="Variant.Filled">
                            <MudSelectItem Value="0" />
                            <MudSelectItem Value="1" />
                        </MudSelect>
                        <span>till</span>
                        <MudSelect @bind-Value="@(Question.ScaleOptions.High)" Variant="Variant.Filled">
                            @for (int i = 1; i <= 10; i++)
                            {
                                <MudSelectItem Value="i" />
                            }
                        </MudSelect>
                    </MudContainer>

                    <MudContainer Class="d-flex flex-column gap-2 mt-4">
                        <MudContainer Class="d-flex align-center gap-4">
                            <MudTextField Label="@($"{Question.ScaleOptions.Low}: Etikett (Valfri)")"
                              @bind-Value="@(Question.ScaleOptions.LowLabel)"
                              Variant="Variant.Filled"
                              Clearable="true" />

                        </MudContainer>
                        <MudContainer Class="d-flex align-items-center gap-4">
                            <MudTextField Label="@($"{Question.ScaleOptions.High}: Etikett (Valfri)")"
                              @bind-Value="@(Question.ScaleOptions.HighLabel)"
                              Variant="Variant.Filled"
                              Clearable="true" />
                        </MudContainer>
                    </MudContainer>
                </MudContainer>
                break;
        }
    </MudContainer>

}

@code {
    [Parameter]
    public EventCallback<QuestionModel> OnChange { get; set; }

    [Parameter]
    public QuestionModel Question { get; set; } = new();

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public string FormType { get; set; }

    [Parameter]
    public FormModel Form { get; set; }

    private string? shortAnswer;
    private string? longAnswer;
    private DateTime? date;
    private DateRange? dateRange;
    private TimeSpan? timeSpan;

    private async void AddChoice ()
    {
        ChoiceModel choice = new()
            {
                QuestionId = Question.QuestionId,
                ChoiceTitle = $"Alternativ {Question.ChoiceOptions.Count + 1}",
                ChoiceOrder = Question.ChoiceOptions.Count + 1,
                ChoiceDate = DateTime.Now
            };

        Question.ChoiceOptions.Add(choice);

        if (FormType == "LundqvistForms.Pages.Index")
        {
            await BrowserStorage.SetAsync("form", Form);
        }
        else if (FormType == "LundqvistForms.Pages.EditCurrentForm")
        {
            await BrowserStorage.SetAsync("editForm", Form);
        }

        await OnChange.InvokeAsync();
    }

    private async void RemoveChoice (ChoiceModel choice)
    {
        List<ChoiceModel> choicesAfterCurrent = Question.ChoiceOptions.Where(x => x.ChoiceOrder > choice.ChoiceOrder).ToList();

        foreach (ChoiceModel afterChoice in choicesAfterCurrent)
        {
            afterChoice.ChoiceOrder--;
        }

        Question.ChoiceOptions.Remove(choice);

        if (FormType == "LundqvistForms.Pages.Index")
        {
            await BrowserStorage.SetAsync("form", Form);
        }
        else if (FormType == "LundqvistForms.Pages.EditCurrentForm")
        {
            await BrowserStorage.SetAsync("editForm", Form);
        }
        await OnChange.InvokeAsync();
    }

    private async Task OrderUp (ChoiceModel choice)
    {
        ChoiceModel choiceBefore = Question.ChoiceOptions.First(x => x.ChoiceOrder == choice.ChoiceOrder - 1);
        choiceBefore.ChoiceOrder++;
        choice.ChoiceOrder--;
        Question.ChoiceOptions = Question.ChoiceOptions.OrderBy(x => x.ChoiceOrder).ToList();
        await OnChange.InvokeAsync();
    }

    private async Task OrderDown (ChoiceModel choice)
    {
        ChoiceModel segmentAfter = Question.ChoiceOptions.First(x => x.ChoiceOrder == choice.ChoiceOrder + 1);
        segmentAfter.ChoiceOrder--;
        choice.ChoiceOrder++;
        Question.ChoiceOptions = Question.ChoiceOptions.OrderBy(x => x.ChoiceOrder).ToList();
        await OnChange.InvokeAsync();
    }
}
