@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using FormsLibrary.Models;
@inject ProtectedLocalStorage BrowserStorage

<MudCheckBox Checked="@isChecked"
             CheckedChanged="@(async (bool newChoice) =>
                {
                    if (newChoice)
                    {
                        MultipleChoiceAnswerModel newMultipleChoiceAnswer = new()
                            {
                                MultipleChoiceTitle = Question.ChoiceOptions.ToList()[Index].ChoiceTitle,
                                AnswerId = Answers.First(x => x.QuestionId == Question.QuestionId).AnswerId
                            };

                        Answers.First(x => x.QuestionId == Question.QuestionId).MultipleChoice.Add(newMultipleChoiceAnswer);
                    }
                    else
                    {
                        var choiceToRemove = Answers.First(x => x.QuestionId == Question.QuestionId).MultipleChoice.First(x => x.MultipleChoiceTitle == Question.ChoiceOptions.ToList()[Index].ChoiceTitle);
                        Answers.First(x => x.QuestionId == Question.QuestionId).MultipleChoice.Remove(choiceToRemove);
                    }

                    await BrowserStorage.SetAsync("answers", Answers);

                })"
             Disabled="Disabled">
    @Question.ChoiceOptions.ToList()[Index].ChoiceTitle
</MudCheckBox>

@code {
    [Parameter]
    public AnswerModel Answer { get; set; } = new();

    [Parameter]
    public List<AnswerModel> Answers { get; set; } = new();

    [Parameter]
    public QuestionModel Question { get; set; } = new();

    [Parameter]
    public int Index { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    private bool isChecked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        bool currentCheck = isChecked;

        isChecked = Disabled ?
                        Answer.MultipleChoice.Any(x => x.MultipleChoiceTitle == Question.ChoiceOptions.ToList()[Index].ChoiceTitle) :
                        Answers.First(x => x.QuestionId == Question.QuestionId).MultipleChoice.Any(x => x.MultipleChoiceTitle == Question.ChoiceOptions.ToList()[Index].ChoiceTitle);

        if (currentCheck != isChecked)
        {
            await BrowserStorage.SetAsync("answers", Answers);
            StateHasChanged();
        }
    }
}
