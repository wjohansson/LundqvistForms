@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using FormsLibrary.Models;
@inject ProtectedLocalStorage BrowserStorage

<MudCheckBox @onclick="@(() => UpdateMultipleChoice())" @bind-Checked="@isChecked">
    @Question.ChoiceOptions.ToList()[Index].ChoiceTitle
</MudCheckBox>

@code {
    [Parameter]
    public AnswerModel Answer { get; set; } = new();

    [Parameter]
    public List<AnswerModel> Answers { get; set; } = new();

    [Parameter]
    public QuestionModel Question { get; set; } = new();

    [Parameter]
    public int Index { get; set; }

    private bool isChecked;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Answer.MultipleChoice.Any(x => x.MultipleChoiceTitle == Question.ChoiceOptions.ToList()[Index].ChoiceTitle))
        {
            isChecked = true;
            StateHasChanged();
        }
    }

    private async Task UpdateMultipleChoice()
    {
        if (!isChecked)
        {
            MultipleChoiceAnswerModel newMultipleChoiceAnswer = new()
                {
                    MultipleChoiceTitle = Question.ChoiceOptions.ToList()[Index].ChoiceTitle
                };

            Answer.MultipleChoice.Add(newMultipleChoiceAnswer);
            await BrowserStorage.SetAsync("answers", Answers);
        }
        else
        {
            var choiceToRemove = Answer.MultipleChoice.First(x => x.MultipleChoiceTitle == Question.ChoiceOptions.ToList()[Index].ChoiceTitle);
            Answer.MultipleChoice.Remove(choiceToRemove);
            await BrowserStorage.SetAsync("answers", Answers);

        }
    }
}
