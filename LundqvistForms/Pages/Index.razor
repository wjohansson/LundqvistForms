@page "/"

@using FormsLibrary.Models;
@using LundqvistForms.Components

<PageTitle>Lundqvist Forms</PageTitle>

<MudPaper Width="100%" Class="d-flex flex-column align-content-center gap-2 " Elevation="0" Style="@($"background-color: {Colors.Grey.Darken3};")">
    @foreach (FormModel chapter in chapters)
    {
        <MudContainer MaxWidth="MaxWidth.Small" @onclick="@(() => FocusChapter(chapter))" Class="d-flex flex-column gap-2 p-4 rounded-3 pa-0 rounded" Style="@($"background-color: {Colors.Grey.Darken2}; border-left-color: {borderColor};")">
            <SectionHeader IsFocused="@(currentChapter == chapter)"></SectionHeader>
            <Questions Chapter="@chapter"></Questions>
        </MudContainer>
    }
    <MudContainer class="controls">
        <Controls OnQuestionAdded="@(() => AddQuestion(currentChapter))" OnSectionAdded="@AddSection"></Controls>
    </MudContainer>
</MudPaper>

<style>
    .controls {
        position: fixed;
        top: @focusPosition;
        left: 95%;
    }
</style>

@code {
    // TODO: Trace active field and move controls to always be adjacent of that component
    // TODO: Fixa focus vänstra vita linjen
    private List<FormModel> chapters = new();
    private string focusPosition = "80px";
    private FormModel currentChapter = new();
    private string borderColor = Colors.Grey.Darken1;

    protected override async Task OnInitializedAsync()
    {
        AddSection();
    }

    public void AddQuestion(FormModel chapter)
    {
        chapter.Components.Add(new QuestionModel());
    }

    public void AddSection()
    {
        FormModel newForm = new();
        chapters.Add(newForm);
        currentChapter = newForm;
    }

    public void FocusChapter(FormModel chapter)
    {
        currentChapter = chapter;
    }

    public string CheckFocus(FormModel chapter)
    {
        if (currentChapter == chapter)
        {
            return Colors.Grey.Lighten1;
        }
        return Colors.Grey.Darken3;
    }
}