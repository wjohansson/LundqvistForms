@page "/"

@using FormsLibrary.Models;
@using LundqvistForms.Components;
@using LundqvistForms.Services;
@inject FormServiceUi formService;
@inject SegmentServiceUi segmentService;
@inject QuestionServiceUi questionService;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar

<PageTitle>Lundqvist Forms</PageTitle>

<MudPaper Width="100%" Class="d-flex flex-column align-center gap-2 pb-4" Elevation="0" Style="@($"background-color: {Colors.Grey.Darken4};")">
    <FormHeader Form="@form" />

    <Virtualize Items="form.Segments" Context="segment">
        <MudContainer Class="d-flex gap-2 mx-0 justify-center">
            <MudContainer MaxWidth="MaxWidth.Medium" @onclick="@(() => FocusSegment(segment))" Class="d-flex flex-column gap-2 rounded-3 pa-4 ma-0 rounded" Style="@($"background-color: {Colors.Grey.Darken3}; border-left: 4px solid {CheckFocus(segment)};")">
                <SegmentHeader OnToggleExpand="@(() => ToggleSegmentExpand(segment))" OnChange="StateHasChanged" Form="form" IsFocused="@(currentSegment == segment)" Segment="segment" />
                <Questions OnChange="StateHasChanged" Segment="segment" Expanded="segmentExpanded" />
            </MudContainer>

            @if (segment == currentSegment)
            {
                <Controls OnQuestionAdded="AddQuestion" OnSegmentAdded="AddSegment" />
            }
        </MudContainer>
    </Virtualize>

    <MudContainer Class="d-flex justify-center gap-2">
        <MudTooltip Arrow="true" Placement="Placement.Right">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="CreateForm" StartIcon="@Icons.Material.Filled.AddCircle" Size="Size.Large">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Skapar formulär...</MudText>
                }
                else
                {
                    <MudText>Skapa formulär</MudText>
                }
            </MudButton>
        </MudTooltip>

        <MudTooltip Arrow="true" Placement="Placement.Right">
            <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="ClearForm" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Large">Rensa formulär</MudButton>
        </MudTooltip>
    </MudContainer>
</MudPaper>

@code {
    // TODO: Fixa vid focus av dropdowns att texten i fälten blir på samma ställe som dropdown
    // TODO: Fixa så att hela formen sparas ifall man skulle refresha sidan
    // TODO: Fixa expand och collapse på avsnitt
    // TODO: Fixa global ångra knapp, och ctrl y liknande knapp
    // TODO: Lägg till date now vid create form i API
    // TODO: Lägga till möjlighet att spara versioner av formuläret genom dates, och kunna kolla på gamla versioner av denna genom UserForms tabellen
    // TODO: Få alla select/text fields i question header att bli samma storlek, både på edit och create form
    // TODO: Dialog rutor som popups vid varje gång delete ---------
    // TODO: Kunna flytta ordning på avsnitt och frågor genom drag and drop (frågor) och välja ordning (avsnitt)
    // TODO: Fixa så att duplication också tar med alla alternativ för 1 fråga
    // TODO: FIxa fokus vid klicka på duplicera mm knappar
    // TODO: Fixa så att statehaschanged kallas i UserForms då man deletar ett formulär
    // TODO: Lägg till fler viktiga columner i UserForms, exempelvis antal svar. Sen lägga till knapp för visa resultatet
    // TODO: Fixa automatiskt minst 1 alternativ i varje choice model vid reset och liknande
    // TODO: Fixa typo i databasen på singechoices
    // TODO: Fixa on change vid ändring av typ av fråga så att den tömmer alla andra alternativ på allt utom valet som är aktivt
    // TODO: Från UserForms kunna markera flera formulär och sedan köra delete all marked.
    // TODO: Undersök möjlighet att ha en delete all older than... knapp på UserForms
    // TODO: Fixa validation på alternativ, måste kanske göra 1 EditForm komponent runt varje case i switchen
    // TODO: Fixa visuell feedback på att ett formulär har skapats
    // TODO: Fixa mer responsiv design
    // TODO: Undersök eventcallbacks via dialog om det går
    // TODO: Gör en bättre statehaschanged istället för reloada sidan vid rensa formulär och ta bort formulär
    // TODO: Få till error meddelanden på att man inte får ha ett tomt alternativ
    // TODO: Fråga: Vill man ha en delay på progressing vid skapandet av formulär?

    public FormModel form { get; set; } = new();
    private SegmentModel currentSegment = new();
    private string errorMessage = "Något obligatoriskt fält är tomt";
    private string successMessage = "Formulär skapat";
    private bool segmentExpanded = true;
    private bool processing;

    protected override async Task OnInitializedAsync()
    {
        form.FormTitle = "Formulär utan namn";
        form.FormDescription = "Ingen beskrivning";
        AddSegment();
    }

    public void AddQuestion()
    {
        QuestionModel newQuestion = new()
            {
                SegmentId = currentSegment.SegmentId,
                QuestionTitle = $"Fråga {currentSegment.Questions.Count + 1}"
            };

        currentSegment.Questions.Add(newQuestion);
    }

    public void AddSegment()
    {
        SegmentModel newSegment = new()
            {
                FormId = form.FormId,
                SegmentTitle = "Avsnitt utan namn",
                SegmentDescription = "Ingen beskrivning"
            };
        form.Segments.Add(newSegment);
        currentSegment = newSegment;
    }

    public void FocusSegment(SegmentModel segment)
    {
        currentSegment = segment;
    }

    public string CheckFocus(SegmentModel segment)
    {
        if (currentSegment == segment)
        {
            return Colors.Grey.Lighten5;
        }
        return Colors.Grey.Darken3;
    }

    public void ToggleSegmentExpand(SegmentModel segment)
    {
        currentSegment = segment;
        segmentExpanded = !segmentExpanded;
    }

    public async Task CreateForm()
    {
        if (form.FormTitle == "" || form.FormDescription == "")
        {
            Snackbar.Add(errorMessage, Severity.Error);
            return;
        }

        foreach (SegmentModel segment in form.Segments)
        {
            if (segment.SegmentTitle == "" || segment.SegmentDescription == "")
            {
                Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            foreach (QuestionModel question in segment.Questions)
            {
                if (question.QuestionTitle == "" || question.ChoiceOptions.Any(x => x.ChoiceTitle == ""))
                {
                    Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }
            }
        }

        try
        {
            processing = true;

            await formService.CreateForm(form);

            form = new()
                {
                    FormTitle = "Formulär utan namn",
                    FormDescription = "Ingen beskrivning"
                };

            AddSegment();

            await Task.Delay(500);
            processing = false;
            Snackbar.Add(successMessage, Severity.Success);
        }
        catch (Exception)
        {
            return;
        }
    }

    public void ClearForm()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Är du säker att du vill rensa formuläret?");
        parameters.Add("ButtonText", "Rensa formulär");
        parameters.Add("Color", Color.Error);
        parameters.Add("Form", form);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<ClearForm>("Är du säker?", parameters, options);
    }
}