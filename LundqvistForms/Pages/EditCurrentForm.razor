@page "/forms/edit/{FormId}"

@using FormsLibrary.Models;
@using LundqvistForms.Components;
@using LundqvistForms.Pages;
@using LundqvistForms.Services;
@inject FormServiceUi formService;
@inject SegmentServiceUi segmentService;
@inject QuestionServiceUi questionService;
@inject NavigationManager navigationManager;
@inject ISnackbar Snackbar

<PageTitle>Lundqvist Forms</PageTitle>

<MudPaper Width="100%" Class="d-flex flex-column align-center gap-2 pb-4" Elevation="0" Style="@($"background-color: {Colors.Grey.Darken4};")">
    <FormContent Form="form"></FormContent>

    <MudContainer Class="d-flex justify-center gap-2">
        <MudTooltip Arrow="true" Placement="Placement.Right">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="EditForm" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Large">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">REDIGERAR FORMULÄR...</MudText>
                }
                else
                {
                    <MudText>REDIGERA FORMULÄR</MudText>
                }
            </MudButton>
        </MudTooltip>

        <MudTooltip Arrow="true" Placement="Placement.Right">
            <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="Cancel" StartIcon="@Icons.Material.Filled.Cancel" Size="Size.Large">AVBRYT REDIGERING</MudButton>
        </MudTooltip>
    </MudContainer>
</MudPaper>

<MudMessageBox @ref="cancelBox" Title="Rensa formulär" CancelText="Nej">
    <MessageContent>
        Är du säker att du vill avbryta redigeringen?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error">Avbryt redigeringen</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    [Parameter]
    public string FormId { get; set; } = "";

    private FormModel form = new();
    private SegmentModel currentSegment = new();
    private MudMessageBox? cancelBox { get; set; }
    private bool processing;
    private string errorMessage = "Något obligatoriskt fält är tomt";
    private string successMessage = "Formulär redigerat";

    protected override async Task OnInitializedAsync()
    {
        form = await formService.GetFormById(Guid.Parse(FormId));
    }

    private int CountQuestion(FormModel form)
    {
        var count = 0;

        foreach (SegmentModel segment in form.Segments.ToList())
        {
            count += segment.Questions.Count;
        }

        return count;
    }

    public async Task EditForm()
    {
        if (CountQuestion(form) == 0)
        {
            Snackbar.Add("Formuläret måste innehålla minst 1 fråga", Severity.Error);
            return;
        }

        if (form.FormTitle == "" || form.FormDescription == "")
        {
            Snackbar.Add(errorMessage, Severity.Error);
            return;
        }

        foreach (SegmentModel segment in form.Segments)
        {
            if (segment.SegmentTitle == "" || segment.SegmentDescription == "")
            {
                Snackbar.Add(errorMessage, Severity.Error);
                return;
            }

            foreach (QuestionModel question in segment.Questions)
            {
                if (question.QuestionTitle == "" || question.ChoiceOptions.Any(x => x.ChoiceTitle == ""))
                {
                    Snackbar.Add(errorMessage, Severity.Error);
                    return;
                }
            }
        }

        try
        {
            processing = true;
            await formService.EditForm(form);

            await Task.Delay(500);
            processing = false;
            Snackbar.Add(successMessage, Severity.Success);
        }
        catch (Exception)
        {
            return;
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/forms");
    }
}